# 构建 linux arm64 版本的包，需要兼容 GLIBC_2.23
# 使用 Ubuntu 16.04 (xenial) 作为容器基础镜像，可确保生成二进制最低 GLIBC 需求为 2.23。
# 若使用 Ubuntu 20.04，glibc 为 2.31，无法满足 GLIBC_2.23 的目标。
name: Linux Build ARM (Ubuntu 16.04)

on:
  workflow_dispatch:

jobs:
  build-linux-aarch64:
    runs-on: ubuntu-22.04-arm
    container: ubuntu:16.04
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Fix APT sources (Ubuntu 16.04 EOL)
        run: |
          set -eux
          cat >/etc/apt/sources.list <<'EOF'
          deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial main restricted universe multiverse
          deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial-updates main restricted universe multiverse
          deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial-security main restricted universe multiverse
          deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports xenial-backports main restricted universe multiverse
          EOF
          cat >/etc/apt/apt.conf.d/99legacy-ubuntu <<'EOF'
          Acquire::Check-Valid-Until "false";
          Acquire::AllowInsecureRepositories "true";
          Acquire::CompressionTypes::Order { "gz"; "xz"; };
          APT::Get::AllowUnauthenticated "true";
          EOF
          if ! command -v wget >/dev/null 2>&1; then
              apt-get -o Acquire::Check-Valid-Until=false -o Acquire::AllowInsecureRepositories=true -o APT::Get::AllowUnauthenticated=true update
              apt-get install -y --no-install-recommends --allow-unauthenticated wget ca-certificates
          fi
          if ! wget --spider --timeout=10 --tries=3 https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/dists/xenial/main/binary-arm64/Packages.gz; then
              echo "Mirror availability check failed" >&2
              exit 1
          fi
          apt-get -o Acquire::Check-Valid-Until=false -o Acquire::AllowInsecureRepositories=true -o APT::Get::AllowUnauthenticated=true update

      - name: Install basic tools and dependencies
        run: |
          apt-get -o Acquire::Check-Valid-Until=false -o Acquire::AllowInsecureRepositories=true -o APT::Get::AllowUnauthenticated=true update
          apt-get install -y --no-install-recommends --allow-unauthenticated \
             git wget curl ca-certificates xz-utils unzip \
             build-essential pkg-config meson ninja-build nasm \
             autoconf automake libtool python3 python3-pip \
             python3-setuptools python3-wheel \
             zlib1g-dev libjpeg-dev libudev-dev \
             ffmpeg libsdl2-2.0-0 libsdl2-dev \
             libavcodec-dev libavdevice-dev libavformat-dev libavutil-dev \
             libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             libv4l-0 libv4l-dev libv4lconvert0 \
             libdigest-sha-perl

      - name: Upgrade meson to support --pkg-config-path
        run: |
          pip3 install --no-cache-dir 'pip<21' 'setuptools<50' 'wheel<0.35'
          pip3 install --no-cache-dir 'meson==0.55.3'

      - name: Install Ninja from source
        run: |
          set -eux
          NINJA_VERSION=1.11.1
          cd /tmp
          wget -q "https://github.com/ninja-build/ninja/archive/refs/tags/v${NINJA_VERSION}.tar.gz"
          tar xf "v${NINJA_VERSION}.tar.gz"
          cd "ninja-${NINJA_VERSION}"
          python3 configure.py --bootstrap
          install -m 755 ninja /usr/local/bin/ninja
          ninja --version


      - name: Check architecture
        run: |
            arch=$(uname -m)
            if [[ "$arch" != "aarch64" && "$arch" != "arm64" ]]
            then
                echo "Unexpected architecture: $arch" >&2
                exit 1
            fi

      - name: Check GLIBC version
        run: |
          ldd --version | head -n1 || true

      - name: Checkout code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eux
          git init
          git remote add origin "https://oauth2:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}"
          git fetch --depth=1 origin "${GITHUB_SHA}"
          git checkout --detach "${GITHUB_SHA}"
          git remote remove origin

      - name: Configure git safe.directory
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Build
        run: release/build_linux.sh aarch64

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
          cd release/work/build-linux-aarch64
          mkdir dist-tar
          cd dist-tar
          tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-aarch64-intermediate
          path: release/work/build-linux-aarch64/dist-tar/
