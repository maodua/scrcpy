name: Linux Build ARM

on:
  workflow_dispatch:

jobs:
  build-scrcpy-server:
    name: Build scrcpy-server (Android)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Build server
        run: release/build_server.sh

      - name: Upload scrcpy-server artifact
        uses: actions/upload-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/scrcpy-server

  build-linux-aarch64:
    name: Build Linux aarch64 client
    # GitHub-hosted ARM64 runner
    runs-on: ubuntu-22.04-arm64
    # Multi-arch image; on ARM64 runner this pulls the arm64 variant
    container: ubuntu:20.04
    needs: [build-scrcpy-server]
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Install basic tools and dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
             git wget curl ca-certificates xz-utils unzip \
             build-essential pkg-config meson ninja-build nasm \
             autoconf automake libtool \
             zlib1g-dev libjpeg-dev libudev-dev \
             ffmpeg libsdl2-2.0-0 libsdl2-dev \
             libavcodec-dev libavdevice-dev libavformat-dev libavutil-dev \
             libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             libv4l-0 libv4l-dev libv4lconvert0 \
             libdigest-sha-perl


      - name: Check architecture
        run: |
            arch=$(uname -m)
            if [[ "$arch" != aarch64 && "$arch" != arm64 ]]
            then
                echo "Unexpected architecture: $arch" >&2
                exit 1
            fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure git safe.directory
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Build client
        run: release/build_linux.sh aarch64

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Include scrcpy-server into dist
        run: |
          cp release/work/build-server/server/scrcpy-server \
             release/work/build-linux-aarch64/dist/

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
            cd release/work/build-linux-aarch64
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-aarch64-intermediate
          path: release/work/build-linux-aarch64/dist-tar/
